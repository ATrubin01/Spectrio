name: Terraform Deployment Workflow

on:
  push:
    branches:
      - main  
      - dev

env:
  # create new variable with custom dynamic value depending on branch name
  ENVIRONMENT_STAGE: ${{ (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/staging' && 'staging') || 'dev' }}

permissions:
      id-token: write 
      contents: read 

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/staging' && 'staging') || 'dev' }}
    defaults:
      run:
        working-directory: ./roots/main-eks-root
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.IAM_ROLE }}
        audience: sts.amazonaws.com

    - name: Terraform Initialize
      run: terraform init -backend-config="bucket=spectrio-project" -backend-config="key=terraform/spectrio-eks-project/${{ env.ENVIRONMENT_STAGE }}.tfstate" -backend-config="region=us-east-1" -backend-config="dynamodb_table=terraform-state-lock" -backend-config="encrypt=true"

    - name: Terraform Plan
      run: terraform plan -var-file=${{ env.ENVIRONMENT_STAGE }}.tfvars -out=tfplan

    - name: Terraform Apply and Update Kubeconfig
      run: |
       terraform apply -auto-approve "tfplan"
       aws eks update-kubeconfig --name spectrio-cluster-${{ env.ENVIRONMENT_STAGE }} --region us-east-1
       kubectl apply -f ./kubernetes_resources/aws_auth_${{ env.ENVIRONMENT_STAGE }}.yaml
       account_number=$(aws sts get-caller-identity --query "Account" --output text)

# installing ingress-nginx Helm repository for ingress-controller
    - name: Add ingress-nginx Helm repository
      run: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update

# installing the ingress-controller
    - name: Install NGINX Ingress controller
      run: |
        helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
        --namespace ingress-nginx --create-namespace

# Wait for the Ingress Controller to be ready
    - name: Wait for Ingress Controller to be ready
      run: |
        kubectl rollout status deployment ingress-nginx-controller --namespace ingress-nginx --timeout=120s

    # - name: Terraform Destroy 
    #   run: terraform destroy -auto-approve


    # - name: Deploy ingress-nginx controller
    #   run: |
    #      kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/aws/deploy.yaml
    #      kubectl -n ingress-nginx patch service ingress-nginx-controller -p '{"spec":{"externalTrafficPolicy":"Cluster"}}'
    #      echo "$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" 
    #